# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11by6fp3HBHydvTpvpr_luah35f3XbC7r
"""

#pip install cudf-cu11 dask-cudf-cu11 --extra-index-url=https://pypi.ngc.nvidia.com

import pandas as pd
import time
import threading

words = pd.read_csv('words.csv', sep=';')



def encrypt_caesar_cipher(word, shift):
    result = ""

    for char in word:
        if char.isalpha():
            ascii_offset = ord('a') if char.islower() else ord('A')
            encrypted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)
            result += encrypted_char
        else:
            result += char

    return result

global Solutions

def decrypt_caesar_cipher(word_in, shift_in):
  DecText = encrypt_caesar_cipher(word = word_in, shift = shift_in) #Encrypt the word again with that shift(Doesn't matter if forward or bw bc we try every shift)
  for r in range(len(words['2'])): #For each word in the dictionary
    print('Thread', -shift_in, 'Checks left: ', len(words['2']) - r, 'Checking ', DecText, 'Against ', words['2'][r]) #Print something
    try:
      if DecText == words['2'][r]: #If the word is the same (Seperately done for performance reasons)
        print('The word is', DecText) #Print that the word is found
        Solutions.append(DecText)
        break #Break this loop
    except:
      print('Invalid check')

Solutions = []
DecipheredWord = 'Mzgjwy'

t1 = threading.Thread(target = decrypt_caesar_cipher, args = (DecipheredWord, -1))
t2 = threading.Thread(target = decrypt_caesar_cipher, args = (DecipheredWord, -2))
t3 = threading.Thread(target = decrypt_caesar_cipher, args = (DecipheredWord, -3))
t4 = threading.Thread(target = decrypt_caesar_cipher, args = (DecipheredWord, -4))
t5 = threading.Thread(target = decrypt_caesar_cipher, args = (DecipheredWord, -5))
t6 = threading.Thread(target = decrypt_caesar_cipher, args = (DecipheredWord, -6))
t7 = threading.Thread(target = decrypt_caesar_cipher, args = (DecipheredWord, -7))
t8 = threading.Thread(target = decrypt_caesar_cipher, args = (DecipheredWord, -7))
t9 = threading.Thread(target = decrypt_caesar_cipher, args = (DecipheredWord, -9))
t10 = threading.Thread(target = decrypt_caesar_cipher, args = (DecipheredWord, -10))
t11 = threading.Thread(target = decrypt_caesar_cipher, args = (DecipheredWord, -11))
t12 = threading.Thread(target = decrypt_caesar_cipher, args = (DecipheredWord, -12))
t13 = threading.Thread(target = decrypt_caesar_cipher, args = (DecipheredWord, -13))
t14 = threading.Thread(target = decrypt_caesar_cipher, args = (DecipheredWord, -14))
t15 = threading.Thread(target = decrypt_caesar_cipher, args = (DecipheredWord, -15))
t16 = threading.Thread(target = decrypt_caesar_cipher, args = (DecipheredWord, -16))
t17 = threading.Thread(target = decrypt_caesar_cipher, args = (DecipheredWord, -17))
t18 = threading.Thread(target = decrypt_caesar_cipher, args = (DecipheredWord, -18))
t19 = threading.Thread(target = decrypt_caesar_cipher, args = (DecipheredWord, -19))
t20 = threading.Thread(target = decrypt_caesar_cipher, args = (DecipheredWord, -20))
t21 = threading.Thread(target = decrypt_caesar_cipher, args = (DecipheredWord, -21))
t22 = threading.Thread(target = decrypt_caesar_cipher, args = (DecipheredWord, -22))
t23 = threading.Thread(target = decrypt_caesar_cipher, args = (DecipheredWord, -23))
t24 = threading.Thread(target = decrypt_caesar_cipher, args = (DecipheredWord, -24))
t25 = threading.Thread(target = decrypt_caesar_cipher, args = (DecipheredWord, -25))
t26 = threading.Thread(target = decrypt_caesar_cipher, args = (DecipheredWord, -26))

t1.start()
t2.start()
t3.start()
t4.start()
t5.start()
t6.start()
t7.start()
t8.start()
t9.start()
t10.start()
t11.start()
t12.start()
t13.start()
t14.start()
t15.start()
t16.start()
t17.start()
t18.start()
t19.start()
t20.start()
t21.start()
t22.start()
t23.start()
t24.start()
t25.start()
t26.start()

t1.join()
t2.join()
t3.join()
t4.join()
t5.join()
t6.join()
t7.join()
t8.join()
t9.join()
t10.join()
t11.join()
t12.join()
t13.join()
t14.join()
t15.join()
t16.join()
t17.join()
t18.join()
t19.join()
t20.join()
t21.join()
t22.join()
t23.join()
t24.join()
t25.join()
t26.join()

print(Solutions)
